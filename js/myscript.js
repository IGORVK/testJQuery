
//ghjls
var auto = ['suzuk', 2010, true];

/*
 * 
 * *************События JQuery************
 * Когда мы что-то делаем на странице сайта НАШ браузер все отслеживает!!!
 * и нам просто надо осуществить доступ к этим событиям :)
 * Браузер все записывает в какой точке экрана произошлособытия какое событие  на каком элементе и тд Отслеживая события Браузер сразу смотрит... А нет ли записанных действий связанных с этим событием?....
 * 
 * Какие же именно события отслеживает браузер?
 * По-порядку:
 *
 * *****события которые происходят с мышью******* 
 mouseover -  наведение мыши на объект
 mouseout - противоположное первому  - мышь уходит
 click - одиночный клик левой кнопкой мыши
 dbclick - двойной щелчок мыши
 mousemove - движение мыши
 mousedown - нажали мышь но еще её не отпускаем
 mouseup - отжатие кнопки мыши
 
 * *****события которые происходят с формами******
 submit - происходит когда наступает отправка формы (нажатие кнопки тип submit)
 Обычно используется для проверки формы Сделаем пример и проверим заполнено ли поле имейл
 $("#my_form").submit(function(eventObject){
     if($("#email").val()==''){
         eventObject.preventDefault();
         alert('Вы не заполнили поле имейл');
     }///если в поле у нас пустота в поле имел мы должны предотвратить отправку формы и вывести сообщение - Вы не заполнили поле имейл
 });
 *
 focus - щелчок внутри элемента формы(внутри чекбокса, тестового поля и тд)
 Пример когда пользовтель щелкает в поле имейл поле подсвечивается зеленой рамкой
 $('#email').focus(function(){
     $(this).css({
         'border':'2px solid green',
         'background-color': '#f6f6f6'
     });
 });
 *
 blur -  противоположное focus событие которое появляется когда мы переходим в другое поле, то есть когда предыдущее поле теряет фокус
  $('#email').focus(function(){
     $(this).addClass('onFocus')}).blur(function() {$(this).removeClass('onFocus')});
 *
 change - изменения в поле, когда в нем что-то меняется (поменял поле в элементе селекет, ввел текст в текстовое поле, поставил радиобатон и тд) т.е. любое изменение состояния поля это событие change C помощью него можно проверять доступные имена имейл на сервере проверять поля и выбирать нужные настройки для формы взависимости от значения выбора. и тд.
 
 
 *
 reset - это когда происходит сброс формы
 *
 keypress - событие нажатие кнопки на клавиатуре из этого события можно вытащить код кнопки нажатой на клавиатуре
 *
 keydown - событие нажатия кнопки на клавиатуре
 *
 keyup - событие отжатия кнопки на клавиатуре
 *
  
 * ************события окна браузера******************
 load - событие которое отслеживает когда загружен любой объект или все файлы страницы html, js, css, картинки, флеш и тд. 
 * 
 resize -  событие когда меняется ширина окна браузера
 * 
 scroll - прокручивание страницы вертикальное либо колесиком мышью
 *
 unload - это когда мы закрываем страницу или переходим на другую страницу
 *
 * 
 * 
 * 
 * 
 * *****************События которые существуют только в JQuery hover() и toggle()**********************
 * 
 hover() событие которое заменяет сразу два события mouseover() и mouseout()
 
 Пример;
 
 var tableStr = $('#moto_table tr');
 
 tableStr.mouseover(function(){
     $(this).addClass('svet');
 });
 
 tableStr.mouseout(function(){
    $(this).removeClass('svet'); 
 });
 
 
 * Теперь тоже самое только с помощью события hover()
 tableStr.hover(function(){
     $(this).addClass('svet');
 }, function(){
    $(this).removeClass('svet'); 
 });
 * 
 * ********Событие toggle() поддерживалось до версии JQuery 1.7 включительно**** далее depricated
 * toggle - это аналог hover() только для клика мышью по сути переключатель
 * 
 * 
 * 
 * ********************Понятие объект события в JQuery**********************
 * браузер отслеживает все информацию и записывает её по каждому событию(координаты, код клавиш, клики, состояни и тд) Так вот как раз всю информацию он записывает применительно к ОБЪЕКТАМ
 * Чтобы получить доступ к объекту необходимо создать обработчик
 * например:
  $('#div_for_img').click(function(){
      alert('Клик');
  });
  это Обработчик
  Так вот чтобы получить доступ к Объекту события необходимо в анонимную функцию в качестве параметра прописать объект события
  например:
   $('#div_for_img').click(function(eventObject){
      alert('Клик');
  });
 * Этот параметр eventObject(дать ему имя можно какое угодно) и будет записана JQuery Вся Информация об объекте событий(координаты, код клавиш, клики состояние итд) Чтобы вытащить эту информацию из него надо сделать следующее
 * Например хотим вытащить координаты по оси Х отностельно монитора то надо сделать так
 *  $('#div_for_img').click(function(eventObject){
      alert('Координата щелчка по оси X:' + eventОbject.screenX);
  });
 * Если нужно вытащить Y ось отностильено монитора то это уже будет screenY
 
 * Но иногда полезно узнать координаты по отношению к окну браузера
 тогда надо прописывать pageX и pageY
 * 
 * Следующее свойство 
 altKey - была ли нажата клавиша alt она возвращает либо истину-true либо ложь-false
 Тоже самое есть для клавиши ctrl
 ctrlKey
 И для shift
 shiftKey
 *
 *Следующее свойство это объект отреагировавший на клик
 target -  объект отреагировавший на клик при этом возвращается обычный JS объект и можем осуществить доступ к его свойствам
  $('#div_for_img').click(function(eventОbject){
      alert('Тип Объекта:' + eventОbject.target);
  });
  
 при этом target возвращает обычный JS объект и  мы можем осуществить доступ к его свойствам хотим узнать значение атрибута id этого объекта
   $('#div_for_img').click(function(eventОbject){
       var myObject = eventОbject.target
      alert('Объектотреагироваший на клик:' + myObject.id);
  });
 *
есть еще одно свойство **************data********** которое достаточно сложное и используется достаточно редко.
 * 
 * 
 * 
 * *************************Метод Отмены события******************************
 * Некотрые элементы DOM дерева иногда имеют встроенные события по умолчания которые иногда надо отменить
 * отмена в JQuery делается так /// например мы хотим отменить действие событие перехода по ссылке на другой сайт
 $('#superlink').click(function(eventObject){
     eventObject.preventDefault();
 });
 * в итоге при клике по ссылке <а id='superlink' href="http://google.com">GOOGLE</a>
 * переход осуществлен не будет т.к. eventObject.preventDefault(); в $('#superlink').click(function(eventObject){*************}); был вызван
 
 * * Вместо eventObject.preventDefault(); 
 * можно написать return false; 
 * и мы получим такой же эффект!!!!!!!!!!!!!!!!!!!!
 * 
 * 
 * И после отмены стандартного события мы можем сделать какое-то другое действие вместо действия по умолчанию
 * $('#superlink').click(function(eventObject){
     eventObject.preventDefault();//или return false;
     например 
     alert('Привет :)');
 });
 
 * ***************Традиционная модель событий в JS и её недостатки******************
 * уравнение ОБЪЕКТ-СОБЫТИЕ-ДЕЙСТВИЕ
 * создаем переменную и Выбираем элемент DOM дерева по селекторам и фильтрам в JS OБЪЕКТ
 например: var myMoto = document.getElementById('img_1');
 * 
 ДЕЙСТВИЕ В JS
 создаем функцию для обработки события например:
 function motoClick() {
     alert("Ширина данной картинки: " + myMoto.width);
 }
 * 
 CОБЫТИЯ В JS ПИШУТСЯ ТАК например для события onclick объекта выборки myMoto присваивается значение функции motoClick
 myMoto.onclick = motoClick;
 *
 Эта модель которая применяется в традиционном JS Это был первый вариант
 *
 Есть второй, более старый вариант - это прописывания события прямо в HTML код
 <img id="img_1" onclick="alert('тестовое сообщение')"/>
 
 * НО сейчас идет тендеция что все должно быть отдельно. HTML отдельно СSS отдельно JS отдельно поэтому эта модель практически не используется
 * 
 * *********************Какие же недостатки есть у этой традиционной модели вызовов в JS?************************
 * самый главный это разная работа с событиями в разных браузерах
 * Как всегда IE пошел своим путем и многие события обрабатывает по-своему поэтому возможны сюрпризы))) Поэтому под IE надо будет писать отдельный код, определять тип браузера под которым зашел пользователь и подставлять нужный вариант кода.
 * 
 * Далее в традиционном JS необходимо писать обработчик для каждого элемента выборки!!!Тогда как в JQuery можно применять действия ко всем элементам выборки одновременно и код при этом займет одну строчку!!!
 * 
 * В традционном JS на одно событие можно повесить одну функцию хотя часто бывает что необходимо использовать несколько функций(2010год).... Хотя сейчас эта ситуация исправлена (см. learn.javascript.ru с помощью разных handler можно решить этот вопрос)
 * 
 * ***************************Так что JQuery очень облегчает программирование в JS)))**************
 * 
 * 
 * *********************************JQuery модель обработки событий*********************************
 * 
 * Найти ОБЪЕКТ Присвоить ему СОБЫТИЕ и прописать нужные ДЕЙСТВИЯ
 
 $('#forheader img').click(function(){
     alert('Вы кликнули по шапке');
 });
 * 
 Еще один пример через объект window так как событие Scroll прокрутка окна
 
$(window).scroll(function(){
     alert('Вы прокрутили страницу');
});
 * 
 Еще пример с клонированием. Берется группа элементов - это все картинки в блоке с id=div_for_img 
 $('#div_for_img img').click(function(){
     var moto = $(this).clone();//клонировали по клику группу элементов в переменную
     $('#forresults').append(moto); вставляем клонированный элемент moto помощью метода append относительно DOM элемента с id=forreluts
 }); В результате по клику на картинке её клон будет появляться в нужном месте
 * 
 * 
 * 
 * 
 * 
 * 
 *****Функции JQuery**********
 * 
 *результаты выборки по DOM дереву лучше сразу помещать в переменную!!! 
 * например  
 * var imgElems = $('#div_for_img  img); 
 * потому что если мы оставим так
 * $('#div_for_img  img); 
 * На большом сайте с множеством картинок будет происходить повторный запрос к DOM дереву в результате сайт начнет ТОРМОЗИТЬ
 * 
 * ***Понятие цепных функций в JQuery*****
 * В JQuery реализована возможность поочередного вызова функций к объекту JQuery
 * например
 * var myLogo = $('img[src*=logo.jpg]');
 * myLogo.hide(3000).show(3000);
 * В итоге последовательно картинка logo.jpg сначала за 3 сек исчезнет а потом появится за 3 сек.
 * 
 * 
 * *********Понятие автоматических циклов в JQuery**********
 * в JQuery когда в объект при выборке попадает много DOM элементов к ним можно применять методы не пользуясь циклами как в JS ... функция будет применена ко всем элементам выборки автоматически
 * Например
 * var elemImgs =  $('#div_for_img  img);
 * elemImgs.hide(300) - все элементы выборки $('#div_for_img  img) скроются в течении 300мс 
 * 
 * 
 * 
 * 
 * 
.text()- позволяет получить текст элемента и изменять его
Применение - создаем JQuery объект  $("#main_h1") и применяем к нему функцию .text()
  $("#main_h1").text() - получение строки
  $("#main_h1").text('Текст изменен с помощью JQuery .text()')-изменение строки
 * 
 .hide() - позволяет прятать элемент. Она может принимать два параметра Первый это длительность эффекта скрытия в милисекундах. Второй необязательный это какая-либо функция которая выполнится после окончания анимации.
  * 
 .show() - позволяет показать ранее скрытый элемент. Она может принимать два параметра Первый это длительность эффекта показа в милисекундах. Второй необязательный это какая-либо функция которая выполнится после окончания анимации.
 *
 .width() - позволяет получить или узнать ширину элемента и изменить его путем передачи параметра
 * 
 .height() - позволяет получить или узнать высоту элемента и изменить его путем передачи параметра
 * 
 .html() - позволяет получить или узнать html код элемента и изменить его путем передачи параметра Передавать html код надо в ' ' единой строкой без переносов!!!
 * 
 .fadeIn() - плавное появление...в скобках передаем параметр - это длительность эффекта  в милисекундах
 * 
 .fadeOut() - плавное исчезновение...в скобках передаем параметр - это длительность эффекта  в милисекундах
 * 
 .fadeTo() - плавное изменение прозрачности с тремя параметрами в функции - это длительность эффекта в мс, степень прозрачности от 0.0 до 1, Третий параметр- необязательный - функция которая может быть выполнена по окончании 
 например 
 var myLogo = $('img[src*=logo.jpg]'); 
 myLogo.fadeTo(4000, 0.5);
 * 
 .slideDown() - плавное изсчезновение за счет ухода вниз...в скобках передаем параметр - это длительность эффекта  в милисекундах
 * 
 .slideUp() - плавное изсчезновение за счет ухода вверх...в скобках передаем параметр - это длительность эффекта  в милисекундах
 * 
 .attr() - добавляет атрибут если его нет или позволяет узнать значение атрибута можно передав первым параметра название атрибута в ковычка...вторым необязательным параметром можно изменить значение атрибута передав новое значение в скобках 
 например .attr('title') - узнаем значение  или .attr('title','узнаем его значение');
 или другой пример удаляем и добавляем атрибут когда его нет.
 $('#moto_table').removeAttr('title').attr('title', 'Новое значение')
 * 
 .removeAttr() - позволяет удалить атрибут выбранного элемента по его названию переданному в функцию в ковычках. 
 * 
 .addClass() - позволяет добавлять класс (ранее прописанный в css) к какому-либо DOM элементу 
 * 
 .removeClass() - позволяет удалять класс (ранее прописанный в css) в каком-либо DOM элементе
 * 
 .css() - позволяет получить точное значение свойств  выбранного элемента в css файле, путем передачи в ковычках названия свойства css переданного в качестве параметра внутрь функции .
 например $("#main_h1").css('font-size'); 
 При получении значений .css() не понимает сокращеных записей css cвойств например margin, padding и тд ... так он не выведет ничего в таком случае .css('margin') В этом случае необходимо задать более точное значение например .css('margin-bottom'),НО когда мы  задаем значение свойств то можно обращаться уже к margin в коротком варианте записи Так же для получения значений свойств color  мы получем значение в rgb например: сss('color') ответ будет в таком формате - rgb(44,150,67) - но это только в случае получения значений цвета.... Устанавливать цвет можно будет как обычно через #fffff
 например: .сss('color', '#fffff');
 Если мы хотим изменить сразу несколько свойств!!! тогда мы передаем литерал объекта {} а уже внутри этих скобок передаем свойсва css
 например 
 .css({
     'color':'#fff',
     'height':'100px',
     'width':'300px'
 });
 
 * 
 .animate() - Изменяет значение свойств не мгновенно как сss а за определенное время!!! То есть мы можем играться со всеми числовыми свойствами во времени!!!
 Например изменяем css свойства до указанных в animate за указаный промежуток времени. Например изменяем ширину была допустим 800px
 
 .animate({'width':'450px'},4000);
 
 третим необязательным параметром можно вызвать какую-либо функцию либо прописав её название либо написав код в третьем параметре через анонимную функцию
 .animate({'width':'450px'},4000,function(){*******код******});
 Особенность в этой функции Она не понимает цифровых свойств написанных через дефис например margin-top или font-size В этой функции их надо прописывать как marginTop или fontSize например.animate({'marginTop':'450px', 'fontSize':'50px'},4000,function(){*******код******});
 
 * 
 * ************JQuery вставка DOM элементов до после перед и в конец************************
 * 
 .before() - вставляет элемент ПЕРЕД нужным объектом
 например .before('<p>Этот текст вставлен с помощью before JQuery перед выбранным Вами элементом</p>')
 * 
 .аfter() - вставляет элемент ПОСЛЕ нужным объектом
 * 
 .prepend() - вставлет элемент внутрь блока но в первом ряду до всех остальных.
 * 
 .append() - вставляет элемент внутрь блока но после всех вложенных элементов
 * 
 * 
 * ********************EACH() JQuery Это по сути полуавтоматический цикл используется если мы хотим поработать с каждым элементом выборки применив какие то условия при этом текущим элементом будет $(this)******************************
 * 
 * допустим нам необходимо скрыть все картинки на сайте больше 400px. При помощи метода each() в JQuery мы можем пройтись по каждому элементу выборки и скрыть все картинки больше 400px 
 * и код будет таким берем нашу выборку затем обращаемся к функции each()
 * $('img').each()
 * Далее в параметры функции each() мы прописываем ЧТО НАДО СДЕЛАТЬ!!!  - для этого в параметрах прописываем действия через анонимную функцию!!! либо прописываем имя готовой функции!!!
 * $('img').each(function(){});
 * При этом в JS к текущему элементу массива мы обращались как array[i] для функции each() JQuery текущим элементом будет $(this)
 * Далее для осуществления отбора нам необходимо прописать условие if если ширина текущего элемента больше чем 400 то его надо скрыть. Это будет выглядеть так.
 * if($(this).width() > 400)
 * а теперь пишем действие которое подразумевает что текущий элемент должен быть скрыт или исчезнет через метод fadeOut()
 * {
 *     $(this).fadeOut(3000);
 * }
 * В итоге мы получим код
 * 
 * $('img').each(function(){
 *     if($(this).width() > 400){
 *     $(this).fadeOut(3000);
 * }
 * });
 * 
 * *****************************************size() JQuery  -  сколько элементов в выборке*********************
 * ****************************************Доступ к контретному элемету в выборке JQuery get()*****************
 * $('div').get(0) - в параметрах указываем тот элемент который нужен и он возвращает не JQuery oбъект а  обычный JS объект!!! Но это редко используется
 * 
 * **************клонирование элементов выборки clone()***************************
 * 
 * например размещение нескольких одинаковых блоков в разных местах страницы делается это с помощью метода clone()
 * 
 *var myDiv =  $("#div_for_img").clone(); - клонировали изображения из div c id=div_for_img в переменную myDiv
 * 
 * затем определяемся с элементо относительно которого мы хотим добавить наш клон и добавляем его удобным нам методом after(),before(),prepend(),append()
 *  например
 * $('.my_form').after(myDiv)
 * 
 * *****************************************Удаление DOM элемента при помощи метода JQuery remove()*************************
 * например
 * $('.my_form').remove();
 * При этом у этого элемента есть хорошая особенность ... он удаляет элемент и он же его возвращает ... при этом мы можем сохранить в какую-то переменную
 * напри
 * var myDeletedObj = $('.my_form').remove(); Объект будет храниться в переменной myDeletedObj и когда он нам понадобится мы его можем вернуть из этой переменной.
 * 
 * И вставляем удаленный объект в другом месте определившись относительного которого элемента мы хотим произвести вставку удобным нам методом after(),before(),prepend(),append()
 * например
 * $('#div_for_img').append(myDeletedObj);
 * 
 * 
 * 
 * *********************************Чтобы добавить в один набор разнотипные элементы необходимо через запятую используя селескторы и фильтры указать все разнотипные элементы***************
 * например $('img[width=200], a[href*=moto],.....и так далее'); Затем через точку обращаемся к методу JQuery и делаем то что нам необходимо :)
 * 
 * 
 ******************************* если необходимо отобрать все элементы имеющие просто определенный атрибут***************************************
 * то мы пишем например $('img[alt]'); - мы отобрали все картинки имеющие просто атрибут alt
 * 
 * 

 **В JQuery DOM дерево должно сначала загрузиться чтобы можно было выполнять с ним какие-то действия!!!!
 поэтому в file.js пишем конструкцию ожидащую закрузку
 
$(document).ready(function() {
    ***** здесь внутри прописываем весь JQuery JS code :)
});

или короткая версия!
$(function() {
    ***** здесь внутри прописываем весь JQuery JS code :)
});


 
 ****ФИЛЬТРЫ ВЫБОРОК*****
 $('#moto_table tr:even')выбор ЧЁТНЫХ строк таблицы с точки зрения JS это НУЛЕВОЙ, ВТОРОЙ и тд элементы массива! поэтому выделяться 1-й и 3-й по обычной системе!!! 
 $('#moto_table tr:odd') неЧЁТНЫХ ;) но смотреться будет как четные)))
 $('img:not(#div_for_img img)')- используется фильтр :not() т.е. в данном случае мы отбираем все картинки кроме тех картинок которые содержаться в блоке с id=div_for_img
 $('div:has(fieldset)') - используется фильт по содержанию элемента :has() т.е. в данном случае отбираем все блоки div которые в нутри себя имеют теги(элементы) fielset
 $('p:contains(мотоцикл)') - используется фильтр по содержанию определенного текста :contains() т.е. в данном случае отбираем все абзацы которые содержат слово мотоцикл.
 $('#div_for_img  img:first') используется фильтр :first т.е. в данном случае отбираем ПЕРвую картинку которая содержится в блоке с id=div_for_img.
 $('#div_for_img  img:last') используется фильтр :last т.е. в данном случае отбираем ПослеДНЮю картинку которая содержится в блоке с id=div_for_img.
 $('div:hidden') - используется фильтр :hidden т.е. отбираем все блоки которые на ДАННЫЙ МОМЕНТ ВРЕМЕНИ СкрытЫ
 $('div:visible') - используется фильтр :visible т.е. отбираем все блоки которые на ДАННЫЙ МОМЕНТ ВРЕМЕНИ вИДНы
 
 ***********Фильтры работы с формой*****************
 * ***выбор элементов созданных с помощью тега input******
 $(':checkbox') - выбо всех чекбоксов
 $(':radio') - выбор всех radiobutton
 $(':submit') - выбор всез submit
 $(':reset')  - выбор всех кнопок сброса
 $(':file') - Все кнопки загрузки файлов
 $(':text') - все текстовые поля
 $(':password') - все поля для ввода пароля
 $(':image') - все input для вывода картинок
  
 * 
 * $(':input') - скрыть все элементы инпут которые позволяют вводить информацию
 * 
 $(':button') - выбрать все просто кнопки
 
 если необходимо скрыть элемент input в какой-то конкретной форме-form на странице. То естественно мы може обратиться к ней по уникальному cелектору например id потом через ПРОБЕЛ дописать фильтр инпута Например:
 $('#first_form :text').fadeOut(3000);
 *
 * 
 * 
 * *******************Отбор активных элементов формы :checked и :selected ******************
 * например состояние checked для radiobutton и chekbox
 * Мы можем отобрать их при помощи фильтра
 * Например нам надо отобрать все checkbox checked  в форме с id="first_form"
 * при этом после #first_form пишем обязательно пробел а ПОТОм добавляем слитно написав :checkbox:сhecked!!!!для радиокнопок пишем :radio:checked
 * $('#first_form :checkbox:сhecked')
 * 
 * второй из фильтров активных состояний это :selected
 * для элемента формы select-выпадающий список мы отбираем выделенный элемент этого списка через фильтр :selected
 * Например в конкретной форме с id="first_form" мы выбираем конкретный select
 c id="my_select" и берем выделенный пользователем элемент selected
 $("#first_form #my_select :selected").
 
 *****************************Узнать значение которое было введено в поле в форме*******************
 * например нам надо узнать значение textarea в форме после нажатия кнопки 
 * $('#checkButton').click(function(){ //в момент клика по кнопке должна выполниться анананиманя функция со следующим кодом
 *  alert($(#my_textarea).val());//И теперь мы выводим при помощи alert значение textarea c id="my_textarea" которое возвращается функцией val();
 *     
 * });
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 
 
 
 
 *Выбор по значению атрибута - ЧЕТЫРЕ способа*
$('img[width=200]'); - отберет теги img со значением атрибута width=200;
$('a[href^=http]'); - отберет все теги а у которых href Начинается^ c http
$('a[href$=.pdf]'); - отберет все теги а у которыз href Заканчивается$ на .pdf
$('img[src*=moto]') - отберет все теги img у которых в Любом* месте атрибута src встречается слово moto
 
 *Выбор дочернего элемента*
 $('#div_img > img'); - выберет все только ДОЧЕРНИЕ элементы img в элементе с id="div_img"
 
 *Выбор следующего тега*
 $('#main + p'); - выберет выбер тег p который следует за элементом с id="main"
 
 * Поиск вложенных элементов*
$('p strong') - выберет все вложенные strong в p
$('#div_for_img img') - выберет все теги img в div c идентификатором div_for_img
  
 *Три основных метода поиска*
 $('.btn'); - выбор элементов DOM по классу 
 $('#onlyONe'); - выбор элементов DOM по идентификатору 
 $('p'); - выбор элементов DOM по тегу
 * */